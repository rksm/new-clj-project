{:files {"deps.edn"

         "
{:deps {org.clojure/clojurescript {:mvn/version \"1.10.520\"}
        com.bhauman/figwheel-main {:mvn/version \"RELEASE\"}
        cljs-http {:mvn/version \"0.1.46\"}
        reagent {:mvn/version \"0.8.1\"}
        http-kit {:mvn/version \"2.3.0\"}
        ring {:mvn/version \"1.7.1\"}
        compojure {:mvn/version \"1.6.1\"}}
 :paths [\"src\" \"resources\"]
 :aliases {:test {:extra-paths [\"test\"]
                  :extra-deps {com.cognitect/test-runner {:git/url \"https://github.com/cognitect-labs/test-runner.git\"
                                                          :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}}
                  :main-opts [\"-m\" \"cognitect.test-runner\"]}
           :nrepl {:extra-paths [\"dev\"]
                   :extra-deps {nrepl {:mvn/version \"RELEASE\"}
                                vvvvalvalval/scope-capture {:mvn/version \"RELEASE\"}
                                philoskim/debux {:mvn/version \"RELEASE\"}
                                cider/piggieback {:mvn/version \"RELEASE\"}
                                cider/cider-nrepl {:mvn/version \"0.22.3\"}
                                refactor-nrepl {:mvn/version \"2.5.0-SNAPSHOT\"}}}
           :cljs {:main-opts [\"-m\" \"figwheel.main\" \"-bo\" \"dev\"]}
           :cljs-prod {:main-opts [\"-m\" \"figwheel.main\" \"-bo\" \"prod\"]}"

         "Makefile" ""

         ".gitignore" "
/.cpcache
/.nrepl-port
/target/
/bin/"

         "src/${PROJECT-FILE-NAME}" {

                                     "nrepl.clj" "
(ns ${NS}.nrepl
  (:require cider.nrepl
            cider.piggieback
            [clojure.pprint :refer [cl-format pprint]]
            figwheel.main.api
            nrepl.core
            nrepl.server
            [refactor-nrepl.middleware :refer [wrap-refactor]]))

;; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

(defonce clj-nrepl-server (atom nil))

(defn start-clj-nrepl-server []
  (let [middlewares (conj (map resolve cider.nrepl/cider-middleware)
                          wrap-refactor)
        handler (apply nrepl.server/default-handler middlewares)]
    (pprint middlewares)
    (reset! clj-nrepl-server (nrepl.server/start-server :handler handler :port 7888)))
  (cl-format true \"clj nrepl server started~%\"))

;; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

(defonce cljs-nrepl-server (atom nil))
(defonce cljs-send-msg (atom nil))
(defonce cljs-client (atom nil))
(defonce cljs-client-session (atom nil))

(defn start-cljs-nrepl-server []
  (let [middlewares (conj
                     (map resolve cider.nrepl/cider-middleware)
                     #'cider.piggieback/wrap-cljs-repl)
        handler (apply nrepl.server/default-handler middlewares)]
    (reset! cljs-nrepl-server (nrepl.server/start-server :handler handler :port 7889)))
  (cl-format true \"cljs nrepl server started~%\"))

(defn start-cljs-nrepl-client []
  (let [conn (nrepl.core/connect :port 7889)
        c (nrepl.core/client conn 1000)
        sess (nrepl.core/client-session c)]
    (reset! cljs-client c)
    (reset! cljs-client-session sess)
    (cl-format true \"nrepl client started~%\")
    (reset! cljs-send-msg
            (fn [msg] (let [response-seq (nrepl.core/message sess msg)]
                        (cl-format true \"nrepl msg send~%\")
                        (pprint (doall response-seq)))))))

(defn cljs-send-eval [code]
  (@cljs-send-msg {:op :eval :code code}))

;; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

(defn restart-cljs-server []
  (when @cljs-nrepl-server
    (nrepl.server/stop-server @cljs-nrepl-server))
  (try (figwheel.main.api/stop-all) (catch Exception e (prn e)))

  (start-cljs-nrepl-server)
  (start-cljs-nrepl-client))

(defn -main [& args]
  (sc.api.logging/register-cs-logger :sc.api.logging/log-spy-cs (fn [cs] nil))
  (start-clj-nrepl-server)
  (start-cljs-nrepl-server)
  (start-server! app-state)

  ;; (start-cljs-nrepl-client)
  ;; (cljs-send-eval \"(require 'figwheel.main) (figwheel.main/start :fig)\")
  )

;; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

(comment
  (restart-cljs-server))
"

                                     "core.cljs" "
(ns ${NS}.core)

(enable-console-print!)

(println \"hello world\")"

                                     "main.clj" "
(ns ${NS}.main)

(println \"hello world\")"}}}
